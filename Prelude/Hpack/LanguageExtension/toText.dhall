let LanguageExtension = ./Type.dhall

let LanguageExtension/toText
    : ∀(x : LanguageExtension) → Text
    = λ(x : LanguageExtension) →
        merge
          { AllowAmbiguousTypes = "AllowAmbiguousTypes"
          , ApplicativeDo = "ApplicativeDo"
          , Arrows = "Arrows"
          , BangPatterns = "BangPatterns"
          , BinaryLiterals = "BinaryLiterals"
          , BlockArguments = "BlockArguments"
          , CPP = "CPP"
          , ConstrainedClassMethods = "ConstrainedClassMethods"
          , ConstraintKinds = "ConstraintKinds"
          , DataKinds = "DataKinds"
          , DatatypeContexts = "DatatypeContexts"
          , DefaultSignatures = "DefaultSignatures"
          , DeriveAnyClass = "DeriveAnyClass"
          , DeriveDataTypeable = "DeriveDataTypeable"
          , DeriveFoldable = "DeriveFoldable"
          , DeriveFunctor = "DeriveFunctor"
          , DeriveGeneric = "DeriveGeneric"
          , DeriveLift = "DeriveLift"
          , DeriveTraversable = "DeriveTraversable"
          , DerivingStrategies = "DerivingStrategies"
          , DerivingVia = "DerivingVia"
          , DisambiguateRecordFields = "DisambiguateRecordFields"
          , DuplicateRecordFields = "DuplicateRecordFields"
          , EmptyCase = "EmptyCase"
          , EmptyDataDeriving = "EmptyDataDeriving"
          , ExistentialQuantification = "ExistentialQuantification"
          , ExplicitForall = "ExplicitForall"
          , ExplicitNamespaces = "ExplicitNamespaces"
          , ExtendedDefaultRules = "ExtendedDefaultRules"
          , FlexibleContexts = "FlexibleContexts"
          , FlexibleInstances = "FlexibleInstances"
          , FunctionalDependencies = "FunctionalDependencies"
          , GADTSyntax = "GADTSyntax"
          , GADTs = "GADTs"
          , GeneralizedNewtypeDeriving = "GeneralizedNewtypeDeriving"
          , HexFloatLiterals = "HexFloatLiterals"
          , ImplicitParams = "ImplicitParams"
          , IncoherentInstances = "IncoherentInstances"
          , InstanceSigs = "InstanceSigs"
          , KindSignatures = "KindSignatures"
          , LambaCase = "LambaCase"
          , LiberalTypeSynonyms = "LiberalTypeSynonyms"
          , MagicHash = "MagicHash"
          , MonadComprehensions = "MonadComprehensions"
          , MonadFailDesugaring = "MonadFailDesugaring"
          , MonoLocalBinds = "MonoLocalBinds"
          , MultiParamTypeClasses = "MultiParamTypeClasses"
          , MultiWayIf = "MultiWayIf"
          , NamedFieldPuns = "NamedFieldPuns"
          , NamedWildCards = "NamedWildCards"
          , NegativeLiterals = "NegativeLiterals"
          , NoImplicitPrelude = "NoImplicitPrelude"
          , NoMonomorphismRestriction = "NoMonomorphismRestriction"
          , NoPatternGuards = "NoPatternGuards"
          , NoTraditionalRecordSyntax = "NoTraditionalRecordSyntax"
          , NullaryTypeClasses = "NullaryTypeClasses"
          , NumDecimals = "NumDecimals"
          , NumericUnderscores = "NumericUnderscores"
          , OverlappingInstances = "OverlappingInstances"
          , OverloadedLabels = "OverloadedLabels"
          , OverloadedLists = "OverloadedLists"
          , OverloadedStrings = "OverloadedStrings"
          , PackageImports = "PackageImports"
          , ParallelListComp = "ParallelListComp"
          , PartialTypeSignatures = "PartialTypeSignatures"
          , PatternSynonyms = "PatternSynonyms"
          , PolyKinds = "PolyKinds"
          , PostfixOperators = "PostfixOperators"
          , QualifiedDo = "QualifiedDo"
          , QuantifiedConstraints = "QuantifiedConstraints"
          , QuasiQuotes = "QuasiQuotes"
          , Rank2Types = "Rank2Types"
          , RankNTypes = "RankNTypes"
          , RebindableSyntax = "RebindableSyntax"
          , RecordWildCards = "RecordWildCards"
          , RoleAnnotations = "RoleANnotations"
          , Safe = "Safe"
          , ScopedTypeVariables = "ScopedTypeVariables"
          , StandaloneDeriving = "StandaloneDeriving"
          , StarIsType = "StarIsType"
          , StaticPointers = "StaticPointers"
          , Strict = "Strict"
          , StrictData = "StrictData"
          , TemplateHaskell = "TemplateHaskell"
          , TemplateHaskellQuotes = "TemplateHaskellQuotes"
          , TransformListComp = "TransformListComp"
          , Trustworthy = "Trustworthy"
          , TupleSections = "TupleSections"
          , TypeFamilies = "TypeFamilies"
          , TypeFamilyDependencies = "TypeFamilyDependencies"
          , TypeInType = "TypeInType"
          , TypeOperators = "TypeOperators"
          , UnboxedSums = "UnboxedSums"
          , UnboxedTuples = "UnboxedTuples"
          , UndecidableInstances = "UndecidableInstances"
          , UndecidableSuperClases = "UndecidableSuperClases"
          , UnicodeSyntax = "UnicodeSyntax"
          , Unsafe = "Unsafe"
          , ViewPatterns = "ViewPatterns"
          }
          x

in  LanguageExtension/toText
